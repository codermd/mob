// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Mxp.Core.Business;
using CoreGraphics;
using System.Collections.Specialized;
using System.Collections;
using System.ComponentModel;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

namespace Mxp.iOS
{
	public partial class ApprovalsViewController : MXPViewController
	{
		protected IEnumerable selectedApprovals;

		protected void SetApprovals<T> (Approvals<T> approvals) where T : Approval {
			if (this.selectedApprovals != null)
				((INotifyPropertyChanged)this.selectedApprovals).PropertyChanged -= HandlePropertyChanged;
			
			this.selectedApprovals = approvals;

			if (this.selectedApprovals != null) {
				((INotifyPropertyChanged)this.selectedApprovals).PropertyChanged += HandlePropertyChanged;
				this.source.Approvals = this.selectedApprovals;
				this.ReloadData ();
			}
		}

		protected ReportApproval reportSelectedApproval;
		protected TravelApproval travelSelectedApproval;

		private UIRefreshControl refreshControl;
		private Source source;

		public class SelectedEventArgs : EventArgs
		{
			public Approval approval { get; set; }
		}

		public event EventHandler<SelectedEventArgs> cellSelected;

		public ApprovalsViewController (IntPtr handle) : base (handle) {
			
		}

		public override void ViewDidLoad () {
			base.ViewDidLoad ();

			this.SegmentedControl.RemoveAllSegments ();

			this.SegmentedControl.InsertSegment (Labels.GetLoggedUserLabel (Labels.LabelEnum.Reports), 0, false);
			this.SegmentedControl.InsertSegment (Labels.GetLoggedUserLabel (Labels.LabelEnum.Travels), 1, false);

			this.refreshControl = new UIRefreshControl ();
			this.refreshControl.ValueChanged += handleRefreshController;
			this.TableView.AddSubview(refreshControl);

			this.source = new Source ();
			this.source.cellSelected += (object sender, SelectedEventArgs e) =>	this.ShowApproval(e.approval);

			this.TableView.Source = this.source;

			this.showCollection (0);

			this.Title = Labels.GetLoggedUserLabel (Labels.LabelEnum.Approvals);

			this.processRefresh ();

			ExpenseItem expenseItem = ((MainTabBarControllerView)this.TabBarController)?.ExpenseItem;
			if (expenseItem != null)
				this.SetSelectedApproval (expenseItem.ParentExpense.Approval);
		}

		public override void ViewWillAppear (bool animated) {
			base.ViewWillAppear (animated);

			this.ReloadData ();
		}

		private void ReloadData () {
			this.TableView.ReloadData ();

			this.ShowApproval ((this.PresentedApprovalExists ? this.SelectedApproval : null), false);
			this.HighlightSelectedApproval ();
		}

		private bool PresentedApprovalExists {
			get {
				if (this.selectedApprovals is ReportApprovals)
					return ((ReportApprovals)this.selectedApprovals).Contains ((ReportApproval)this.SelectedApproval);
				else if (this.selectedApprovals is TravelApprovals)
					return ((TravelApprovals)this.selectedApprovals).Contains ((TravelApproval)this.SelectedApproval);
				else
					return false;
			}
		}

		public void ShowApproval (Approval approval, bool animated = true) {
			this.SetSelectedApproval (approval);

			if (this.cellSelected != null) {
				SelectedEventArgs e = new SelectedEventArgs ();
				e.approval = approval;
				this.cellSelected (this, e); 
				return;
			}

			if (approval == null)
				return;

			this.SetSelectedApproval (null);

			if (approval is ReportApproval) {
				UIStoryboard storyBoard =  UIStoryboard.FromName ("ReportDetails", NSBundle.MainBundle);
				ReportDetailsViewController vc = storyBoard.InstantiateInitialViewController () as ReportDetailsViewController;
				vc.Report = ((ReportApproval)approval).Report;
				this.NavigationController.PushViewController (vc, animated);
			} else if (approval is TravelApproval) {
				TravelViewController vc = new TravelViewController ();
				vc.Travel = ((TravelApproval)approval).Travel;
				this.NavigationController.PushViewController (vc, animated);
			}
		}

		private void HighlightSelectedApproval () {
			if (this.SelectedApproval == null || !this.PresentedApprovalExists)
				return;

			int index = 0;

			if (this.selectedApprovals is ReportApprovals)
				index = ((ReportApprovals)this.selectedApprovals).IndexOf ((ReportApproval)this.SelectedApproval);
			else if (this.selectedApprovals is TravelApprovals)
				index = ((TravelApprovals)this.selectedApprovals).IndexOf ((TravelApproval)this.SelectedApproval);

			NSIndexPath indexPath = NSIndexPath.FromRowSection (index, 0);
			this.TableView.SelectRow (indexPath, false, UITableViewScrollPosition.Middle);
		}

		public void handleRefreshController (object sender, EventArgs args) {
			this.processRefresh ();
		}

		public async void processRefresh () {
			this.refreshControl.BeginRefreshing ();

			try {
				if (this.selectedApprovals is ReportApprovals)
					await ((ReportApprovals)this.selectedApprovals).FetchAsync ();
				else if (this.selectedApprovals is TravelApprovals)
					await ((TravelApprovals)this.selectedApprovals).FetchAsync ();
			} catch (Exception error) {
				MainNavigationController.Instance.showError (error);
				return;
			} finally {
				this.refreshControl.EndRefreshing ();
			}
		}

		partial void SegmentedControllerChange (UISegmentedControl sender) {
			this.showCollection((int)this.SegmentedControl.SelectedSegment);
		}

		public void showCollection (int index) {
			this.SegmentedControl.SelectedSegment = index;

			switch (index) {
				case 0:
					this.SetApprovals (LoggedUser.Instance.ReportApprovals);
					break;
				case 1:
					this.SetApprovals (LoggedUser.Instance.TravelApprovals);
					break;
			}

			if (this.selectedApprovals == LoggedUser.Instance.TravelApprovals && !LoggedUser.Instance.TravelApprovals.Loaded) {
				this.processRefresh ();
			}
			if (this.selectedApprovals == LoggedUser.Instance.ReportApprovals && !LoggedUser.Instance.ReportApprovals.Loaded) {
				this.processRefresh ();
			}

		}

		private void HandlePropertyChanged (object sender, PropertyChangedEventArgs e) {
			this.source.Approvals = this.selectedApprovals;

			this.ReloadData ();
		}

		protected Approval SelectedApproval {
			get {
				if (this.selectedApprovals is ReportApprovals)
					return this.reportSelectedApproval;
				else if (this.selectedApprovals is TravelApprovals)
					return this.travelSelectedApproval;
				else
					return null;
			}
		}

		protected void SetSelectedApproval (Approval approval) {
			if (this.selectedApprovals is ReportApprovals)
				this.reportSelectedApproval = (ReportApproval)approval;
			else if (this.selectedApprovals is TravelApprovals)
				this.travelSelectedApproval = (TravelApproval)approval;
		}

		private class Source : UITableViewSource 
		{
			private Collection<Approval> approvals = new Collection<Approval>();

			public IEnumerable Approvals  {
				set {
					this.approvals.Clear ();
					foreach (Approval approval in value) {
						this.approvals.Add (approval);
					}
				}
			}

			public event EventHandler<SelectedEventArgs> cellSelected = delegate {};

			public override nint NumberOfSections (UITableView tableView) {
				if (this.approvals == null) {
					return 0;
				}
				return 1;
			}

			public bool isEmpty () {
				return ((ICollection)this.approvals).Count == 0;
			}

			public override nint RowsInSection (UITableView tableview, nint section) {
				if (this.isEmpty ())
					return 1;

				return ((ICollection)this.approvals).Count;
			}

			public UITableViewCell GetTravelCell(UITableView tableView, TravelApproval approval){
				TravelApprovalCell cell = (TravelApprovalCell)tableView.DequeueReusableCell (TravelApprovalCell.Key);

				if (cell == null)
					cell = TravelApprovalCell.Create ();

				cell.setTravelApproval (approval);

				return cell;
			}

			public UITableViewCell GetReportCell(UITableView tableView, ReportApproval approval){
				ReportApprovalCell cell = (ReportApprovalCell)tableView.DequeueReusableCell (ReportApprovalCell.Key);

				if (cell == null)
					cell = ReportApprovalCell.Create ();

				cell.setApproval (approval);

				return cell;
			}

			public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath) {
				if (this.isEmpty ()) {
					EmptyCell cell = tableView.DequeueReusableCell (EmptyCell.Key) as EmptyCell;

					if (cell == null)
						cell = EmptyCell.Create ();

					return cell;
				}

				Approval approval = ((IList<Approval>)this.approvals) [indexPath.Row];

				if (approval is TravelApproval)
					return this.GetTravelCell (tableView, (TravelApproval)approval);

				if (approval is ReportApproval)
					return this.GetReportCell (tableView, (ReportApproval)approval);

				return null;
			}

			public override void RowSelected (UITableView tableView, NSIndexPath indexPath) {
				if (this.isEmpty ())
					return;

				SelectedEventArgs e =  new SelectedEventArgs ();
				e.approval = this.approvals [indexPath.Row];
				this.cellSelected (this, e);
			}

			public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath) {
				if (this.isEmpty ())
					return 100;

				Approval approval = this.approvals [indexPath.Row];

				if (approval is TravelApproval)
					return 98;

				if (approval is ReportApproval)
					return 98;

				return 44;
			}
		}
	}
}