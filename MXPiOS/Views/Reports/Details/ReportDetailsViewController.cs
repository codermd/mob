// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Mxp.Core.Business;
using Mxp.Core.Utils;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Mxp.iOS
{
	public partial class ReportDetailsViewController : MXPViewController
	{
		public ReportDetailsViewController (IntPtr handle) : base (handle)
		{
		}

		public Report Report;

		private UIImage _actionImage;
		private UIImage ActionImage {
			get {
				if (this._actionImage == null)
					this._actionImage = UIImage.FromFile (this.Report.IsFromApproval ? "navbar_approval.png" : "navbar_overflow.png");

				return this._actionImage;
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			this.refresh ();
			this.SegmentedControl.SelectedSegment = 0;
			this.showSection (0);
			this.loadReceipts ();

			ExpenseItem expenseItem = ((MainTabBarControllerView)this.TabBarController)?.ExpenseItem;
			if (expenseItem != null) {
				this.SegmentedControl.SelectedSegment = 1;
				this.SegmentedControl.SendActionForControlEvents (UIControlEvent.ValueChanged);
			}
		}

		public async void loadReceipts ()
		{
			try {
				await this.Report.Receipts.FetchAsync ();
			} catch (Exception e) {
				MainNavigationController.Instance.showError (e);
				return;
			}
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			if (this.Report.CanBeClosed) {
				this.Close ();
				return;
			}

			this.refresh ();
			this.Report.PropertyChanged += modelChange;
		}

		void modelChange (object sender, System.ComponentModel.PropertyChangedEventArgs e)
		{
			this.configureTopBar ();
			if (e.PropertyName.Equals ("NumberReceipts")) {
				this.configureSegments ();
			}
		}

		public override void ViewDidDisappear (bool animated)
		{
			base.ViewDidDisappear (animated);
			this.Report.PropertyChanged -= modelChange;
		}

		public void refresh ()
		{
			if (this.Report == null) {
				return;
			}
			this.configureSegments ();
			this.configureTopBar ();
		}

		public void configureSegments() {

			var selectindex = this.SegmentedControl.SelectedSegment;

			this.SegmentedControl.RemoveAllSegments ();
			this.SegmentedControl.InsertSegment (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.Details), 0, false);
			this.SegmentedControl.InsertSegment (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.Expenses), 1, false);

			if (Report.CanShowReceipts) {
				if (this.Report.NumberReceipts != 0) {
					this.SegmentedControl.InsertSegment (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.Receipts) + "(" + this.Report.NumberReceipts + ")", 2, false);
				} else {
					this.SegmentedControl.InsertSegment (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.Receipts), 2, false);
				}
				if (this.Report.CanShowHistory) {
					this.SegmentedControl.InsertSegment (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.History), 3, false);
				}
			} else {
				if (this.Report.CanShowHistory) {
					this.SegmentedControl.InsertSegment (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.History), 2, false);
				}
			}



			this.SegmentedControl.SelectedSegment = selectindex;
		}

		public void configureTopBar() {
			if (this.Report.IsNew) {
				this.configureNewReportTopBar ();
			} else {
				this.configureDetaultTopBar ();
			}
		}

		public void configureNewReportTopBar ()
		{

			this.NavigationItem.SetHidesBackButton (true, false);
			UIBarButtonItem SaveButton = new UIBarButtonItem (Labels.GetLoggedUserLabel (Labels.LabelEnum.Save), UIBarButtonItemStyle.Done, (sender, args) => {
				this.saveNewReport ();
			});
			this.NavigationItem.RightBarButtonItem = SaveButton;
			UIBarButtonItem CancelButton = new UIBarButtonItem (Labels.GetLoggedUserLabel (Labels.LabelEnum.Cancel), UIBarButtonItemStyle.Plain, (sender, args) => {
				this.cancelNewReport ();
			});
			this.NavigationItem.LeftBarButtonItem = CancelButton;
			this.Title = Labels.GetLoggedUserLabel (Labels.LabelEnum.CreateReport);

		}

		public void configureDetaultTopBar ()
		{

			this.Title = this.Report.VDetailsBarTitle;
			this.NavigationItem.SetHidesBackButton (false, false);

			UIBarButtonItem buttonItem = new UIBarButtonItem (this.ActionImage, UIBarButtonItemStyle.Plain, (sender, args) => {
				if (this.Report.IsFromApproval)
					this.showApprovalAction ();
				else
					this.showAction ();
			});

			this.NavigationItem.SetRightBarButtonItem (buttonItem, true);

			this.NavigationItem.SetLeftBarButtonItems (new UIBarButtonItem[]{ }, true);

		}
			
		public void showAction(){
			if (this.Report.IsDraft) {
				this.showDraftActions ();
			}
			if (this.Report.IsOpen) {
				this.showOpenActions ();
			}
		}

		public void showDraftActions ()
		{

			List<Actionable> actions = new List<Actionable> ();
			actions.Add (new Actionable (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.Submit), () => {
				this.submitReport ();
			}));
			actions.Add (new Actionable (LoggedUser.Instance.Labels.GetLabel (Labels.LabelEnum.Delete) + "?", () => {
				this.confirmDeleteReport ();
			}));


			Actionables actionables = new Actionables (Labels.GetLoggedUserLabel (Labels.LabelEnum.Actions), actions);
			new ActionnablesWrapper (actionables, this, this.NavigationItem.RightBarButtonItem).show();
		}

		public void showOpenActions ()
		{
			List<Actionable> actions = new List<Actionable> ();
			actions.Add (new Actionable (Labels.GetLoggedUserLabel (Labels.LabelEnum.CancelReport), () => {
				this.confirmCancelReport ();
			}));

			Actionables actionables = new Actionables (Labels.GetLoggedUserLabel (Labels.LabelEnum.Actions), actions);
			new ActionnablesWrapper (actionables, this, this.NavigationItem.RightBarButtonItem).show();

		}

		public async Task showApprovalAction ()
		{

			ReportApprovalViewController vc = new ReportApprovalViewController ();
			vc.approval = this.Report.Approval;

			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad) {
				
				vc.ModalPresentationStyle = UIModalPresentationStyle.FormSheet;
				this.PresentViewController (vc, true, null);

				vc.HasApprove += (sender, e) => {
					this.processApprove(()=>{
						vc.DismissViewControllerAsync(true);	
					});
				};
				vc.HasCancel += (sender, e) => {
					vc.DismissViewController(true, null);
				};

			} else {

				this.PresentViewController (vc, true, null);

				vc.HasApprove += (sender, e) => {
					this.processApprove(()=>{
						vc.DismissViewController(true,()=>{
							this.NavigationController.PopViewController(true);	
						});
					});
				};
				vc.HasCancel += (sender, e) => {
					vc.DismissViewController(true, null);
				};
			}
		}

		async Task processApprove(Action Success){
			LoadingView.showMessage(Labels.GetLoggedUserLabel (Labels.LabelEnum.Approving));

			try {
				await this.Report.Approval.SaveAsync ();
			} catch (Exception e) {
				MainNavigationController.Instance.showError (e);
				return;
			} finally {
				LoadingView.hideMessage ();
			}

			Success ();
		}
			
		partial void SelectionChange (UIKit.UISegmentedControl sender)
		{
			this.showSection ((int)this.SegmentedControl.SelectedSegment);
		}

		private IReportDetailsSubController SubControllerForSection ()
		{

			switch (this.SegmentedControl.SelectedSegment) {
			case 0:
				return (IReportDetailsSubController)this.Storyboard.InstantiateViewController ("ReportDetailsTableViewController");
			case 1:
				if (this.Report.CanApproveExpense) {
					return new ApproveExpensesTableViewController();
				} else {
					return (IReportDetailsSubController)this.Storyboard.InstantiateViewController ("ExpensesManagerTableViewController");
				}

			case 2:
				if (this.Report.CanShowReceipts) {
					return (IReportDetailsSubController)this.Storyboard.InstantiateViewController ("ReportReceiptsCollectionViewController");
				} else {
					return (IReportDetailsSubController)this.Storyboard.InstantiateViewController ("HistoryTableViewController");
				}
			case 3:
				return (IReportDetailsSubController)this.Storyboard.InstantiateViewController ("HistoryTableViewController");
			default:
				return null;
			}
		}

		private void showSection (int index)
		{
			this.SegmentedControl.SelectedSegment = index;
			IReportDetailsSubController vc = this.SubControllerForSection ();

			if (vc == null) {
				return;
			}

			vc.Report = this.Report;

			this.AddChildViewController ((UIViewController)vc);

			((UIViewController)vc).View.Frame = this.ViewContainer.Bounds;
			((UIViewController)vc).DidMoveToParentViewController (this);
			foreach (UIView view in this.ViewContainer.Subviews) {
				view.RemoveFromSuperview ();
			}

			this.ViewContainer.AddSubview (((UIViewController)vc).View);

			this.SegmentedControl.SelectedSegment = index;

		}

		public async void saveNewReport ()
		{
			LoadingView.showMessage (Labels.GetLoggedUserLabel (Labels.LabelEnum.Saving) + "...");

			try {
				await this.Report.SaveAsync ();
			} catch(Exception e){
				MainNavigationController.Instance.showError (e);
				return;
			} finally {
				LoadingView.hideMessage ();

				if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad) {
					this.DismissViewController (true, null);
				}
			}

			this.configureTopBar ();
		}

		public async void submitReport(){
			LoadingView.showMessage(Labels.GetLoggedUserLabel (Labels.LabelEnum.Submitting) + "...");

			try {
				await this.Report.SubmitAsync ();
			} catch (Exception e) {
				MainNavigationController.Instance.showError (e);
				return;
			} finally {
				LoadingView.hideMessage ();
			}

			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
				this.NavigationController.PopViewController (true);
			}
		}


		public void confirmDeleteReport ()
		{
			UIAlertView alert = new UIAlertView (Labels.GetLoggedUserLabel (Labels.LabelEnum.Delete) + " " + Labels.GetLoggedUserLabel (Labels.LabelEnum.Report), Labels.GetLoggedUserLabel (Labels.LabelEnum.DoYouConfirm), null, Labels.GetLoggedUserLabel (Labels.LabelEnum.Cancel), new string[]{ "OK" });
			alert.Show ();
			alert.Clicked += (object sender, UIButtonEventArgs e) => {
				if (e.ButtonIndex == 1) {
					this.deleteReport ();	
				}
			};
		}

		public void confirmCancelReport ()
		{
			UIAlertView alert = new UIAlertView (Labels.GetLoggedUserLabel (Labels.LabelEnum.CancelReport), Labels.GetLoggedUserLabel (Labels.LabelEnum.DoYouConfirm), null, Labels.GetLoggedUserLabel (Labels.LabelEnum.Cancel), new string[]{ "OK" });
			alert.Show ();
			alert.Clicked += (object sender, UIButtonEventArgs e) => {
				if (e.ButtonIndex == 1) {
					this.cancelReport ();	
				}
			};
		}


		public async void deleteReport ()
		{
			LoadingView.showMessage (Labels.GetLoggedUserLabel (Labels.LabelEnum.Deleting) + "...");

			try {
				await this.Report.DeleteAsync ();
			} catch (Exception e) {
				MainNavigationController.Instance.showError (e);
				return;
			} finally {
				LoadingView.hideMessage ();
			}

			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
				this.NavigationController.PopViewController (true);
			}
		}

		public async void cancelReport(){
			LoadingView.showMessage(Labels.GetLoggedUserLabel (Labels.LabelEnum.Cancelling) + "...");

			try {
				await this.Report.CancelAsync ();
			} catch (Exception e) {
				MainNavigationController.Instance.showError (e);
				return;
			} finally {
				LoadingView.hideMessage ();
			}

			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
				this.NavigationController.PopViewController (true);
			}
		}

		public void cancelNewReport ()
		{
			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad) {
				this.DismissViewController (true, null);
			} else {
				this.NavigationController.PopViewController (true);
			}

		}
	
	}
}
